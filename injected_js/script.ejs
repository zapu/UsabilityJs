(function(){
	var __ujs_scenario = <%-scenario%>;
	var currentTask = <%-currentTask%>;
	var testUUID = "<%-uuid%>";
	var ujsUrl = "<%-ujsUrl%>";

	/* Function used to send javascript objects to host application */
	function sendPayload(obj, callback) {
		try {
			var str = JSON.stringify(obj);

			var req = new XMLHttpRequest();
			req.open('POST', '/__ujs_callback', true);
			req.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
			req.onreadystatechange = function (aEvt) {
				if (req.readyState == 4) {
					if(req.status == 200) {
						if(callback != null) {
							callback(JSON.parse(req.responseText));
						}
					} else {
						throw new "Loading error";
					}
				}
			};
			req.send(str);
		} catch (err) {
			console.log("Error: " + err);
		}

		return null;
	}

	function sendPayloadSync(obj)
	{
		try {
			var str = JSON.stringify(obj);

			var client = new XMLHttpRequest();
			client.open("POST", "/__ujs_callback", false);
			client.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
			client.send(str);
			if(client.status == 200) 
			{
				var resp = client.responseText;
				return JSON.parse(resp);
			}
		} catch (err) {
			console.log("Error: " + err);
		}

		return null;
	}

	//Declare console in case there isn't one
	//Firebug declares its own, chrome should have one too?
	if(typeof console == 'undefined') {
		console = {log: function(a){}};
	}

	var pageLoaded = sendPayloadSync({action: "PageLoadedAction", requestId: __ujs_request_id});
	__ujs_page_id = pageLoaded.pageId;

	console.log("inject.js reporting in " + __ujs_request_id + " " + __ujs_page_id);

	document.addEventListener( "DOMContentLoaded", function() {
		addScenarioBar();
	}, false);

	window.onbeforeunload = function (e) {
		//Before unload - send stats
		if(document.activeElement != null) {
			checkForInputValueChanged(document.activeElement);
		}
	}

	function updateCurrentTaskParagraphs()
	{
		var currentTaskNumP = document.getElementById("__ujs_currentTaskNum");
		var currentTaskP = document.getElementById("__ujs_currentTask");

		currentTaskNumP.innerHTML = "Current task: <b>" + (currentTask+1) + "/" + (__ujs_scenario.tasks.length);
		currentTaskP.innerHTML = "&bdquo; " + __ujs_scenario.tasks[currentTask] + " &rdquo;";
	}

	function addScenarioBar()
	{
		var overlayHTML = "<div id=\"__ujs_div\">" +
		"<h1>Scenario: " + __ujs_scenario.name + "</h1>" +
		"<p id=\"__ujs_currentTaskNum\"></p>" +
		"<p id=\"__ujs_currentTask\"></p>" +
		"<ul>" +
		"<li><a href=\"#\" id=\"__ujs_previous_link\">Previous Task</a></li>" +
		"<li><a href=\"#\" id=\"__ujs_next_link\">Next Task</a></li>" +
		"<li><a href=\"#\" id=\"__ujs_finish_link\">Finish test</a></li>" +
		"</ul>" +
		"</div>";

		var div = document.createElement('div');
		div.innerHTML = overlayHTML;
		document.body.insertBefore(div.firstChild, document.body.firstChild);

		var previousAnchor = document.getElementById("__ujs_previous_link");
		var nextAnchor = document.getElementById("__ujs_next_link");
		var finishAnchor = document.getElementById("__ujs_finish_link");

		previousAnchor.addEventListener("click", previousTaskClicked);
		nextAnchor.addEventListener("click", nextTaskClicked);
		finishAnchor.addEventListener("click", finishClicked);

		updateCurrentTaskParagraphs();
		checkTaskAnchorsVisible();
	}

	function checkTaskAnchorsVisible()
	{
		var previousAnchor = document.getElementById("__ujs_previous_link");
		var nextAnchor = document.getElementById("__ujs_next_link");
		var finishAnchor = document.getElementById("__ujs_finish_link");

		if(currentTask == 0) {
			previousAnchor.style.visibility = "hidden";
			nextAnchor.style.visibility = "visible";
			finishAnchor.innerHTML = "Finish test";
		} else if(currentTask == __ujs_scenario.tasks.length-1) {
			nextAnchor.style.visibility = "hidden";
			finishAnchor.innerHTML = "Finish test";
		} else {
			previousAnchor.style.visibility = "visible";
			nextAnchor.style.visibility = "visible";
			finishAnchor.innerHTML = "Finish test";
		}
	}

	function getXPath(node, path) {
		path = path || [];
		if(node.parentNode) {
			path = getXPath(node.parentNode, path);
		}

		if(node.previousSibling) {
			var count = 1;
			var sibling = node.previousSibling
			do {
				if(sibling.nodeType == 1 && sibling.nodeName == node.nodeName) {count++;}
					sibling = sibling.previousSibling;
			} while(sibling);
			if(count == 1) {count = null;}
		} else if(node.nextSibling) {
			var sibling = node.nextSibling;
			do {
				if(sibling.nodeType == 1 && sibling.nodeName == node.nodeName) {
					var count = 1;
					sibling = null;
				} else {
					var count = null;
					sibling = sibling.previousSibling;
				}
			} while(sibling);
		}

		if(node.nodeType == 1) {
			path.push(node.nodeName.toLowerCase() + (node.id ? "[@id='"+node.id+"']" : count > 0 ? "["+count+"]" : ''));
		}
		return path;
	};

	function serializeElement(element)
	{
		var obj = {
			id: element.id,
			tagName: element.tagName,
			str: element.toString(),
			XPath: getXPath(element),
			name: element.name || "",
		}

		return obj;
	}

	document.addEventListener('click', function(e) {
		var target = e.target || e.originalTarget;
	
		if(target instanceof HTMLAnchorElement || target instanceof HTMLSpanElement) {
			var payload = {
				action: "ElementClickedAction",
				pageId: __ujs_page_id,
				element: serializeElement(target),
			};

			sendPayload(payload);
		}
	}, true);

	function isElementForm(target)
	{
		return (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement);
	}

	document.addEventListener('focus', function(e) {
		var target = e.target || e.originalTarget;

		if(isElementForm(target)) {
			var payload = {
				action: "ElementFocusedAction",
				pageId: __ujs_page_id,
				element: serializeElement(target),
			};

			sendPayload(payload);
		}
	}, true);

	function checkForInputValueChanged(target)
	{
		if(isElementForm(target)) {
			if(target._sentValue == undefined || target.value != target._sentValue) {
				var payload = {
					action: "InputValueChangedAction",
					pageId: __ujs_page_id,
					element: serializeElement(target),
					value: target.value,
				};

				sendPayload(payload);
				target._sentValue = target.value;
			}
		}
	}

	document.addEventListener('blur', function(e) {
		var target = e.target || e.originalTarget;

		checkForInputValueChanged(target);

		if(isElementForm(target)) {
			var payload = {
				action: "ElementBlurredAction",
				pageId: __ujs_page_id,
				element: serializeElement(target),
			};

			sendPayload(payload);
		}
	}, true);

	function sendCurrentTask()
	{
		var payload = {
			action: "TaskChangedAction",
			pageId: __ujs_page_id,
			task: currentTask,
		}

		sendPayload(payload);
	}

	function previousTaskClicked()
	{
		if(currentTask == 0)
			return;

		currentTask--;
		sendCurrentTask();

		checkTaskAnchorsVisible();
		updateCurrentTaskParagraphs();

		return false;
	}

	function nextTaskClicked()
	{
		if(currentTask == __ujs_scenario.tasks.length-1)
			return;

		currentTask++;
		sendCurrentTask();

		checkTaskAnchorsVisible();
		updateCurrentTaskParagraphs();

		return false;
	}

	function finishClicked()
	{
		window.location.href = ujsUrl + "tests/end_test/" + testUUID;

		return false;
	}
})();